package com.pharos.walker.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.pharos.walker.beans.UserTrainRecordEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_TRAIN_RECORD".
*/
public class UserTrainRecordEntityDao extends AbstractDao<UserTrainRecordEntity, Long> {

    public static final String TABLENAME = "USER_TRAIN_RECORD";

    /**
     * Properties of entity UserTrainRecordEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, long.class, "userId", false, "USER_ID");
        public final static Property KeyId = new Property(2, long.class, "keyId", false, "KEY_ID");
        public final static Property SuccessTime = new Property(3, int.class, "successTime", false, "SUCCESS_TIME");
        public final static Property WarningTime = new Property(4, int.class, "warningTime", false, "WARNING_TIME");
        public final static Property TrainTime = new Property(5, int.class, "trainTime", false, "TRAIN_TIME");
        public final static Property Score = new Property(6, int.class, "score", false, "SCORE");
        public final static Property PainLevel = new Property(7, int.class, "painLevel", false, "PAIN_LEVEL");
        public final static Property AdverseReactions = new Property(8, String.class, "adverseReactions", false, "ADVERSE_REACTIONS");
        public final static Property TargetLoad = new Property(9, int.class, "targetLoad", false, "TARGET_LOAD");
        public final static Property CreateDate = new Property(10, long.class, "createDate", false, "CREATE_DATE");
        public final static Property Frequency = new Property(11, int.class, "frequency", false, "FREQUENCY");
        public final static Property Diagnostic = new Property(12, String.class, "diagnostic", false, "DIAGNOSTIC");
        public final static Property Str = new Property(13, String.class, "str", false, "STR");
        public final static Property PlanId = new Property(14, long.class, "planId", false, "PLAN_ID");
        public final static Property ClassId = new Property(15, int.class, "classId", false, "CLASS_ID");
        public final static Property IsUpload = new Property(16, int.class, "isUpload", false, "IS_UPLOAD");
        public final static Property DateStr = new Property(17, String.class, "dateStr", false, "DATE_STR");
    }


    public UserTrainRecordEntityDao(DaoConfig config) {
        super(config);
    }
    
    public UserTrainRecordEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_TRAIN_RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_ID\" INTEGER NOT NULL ," + // 1: userId
                "\"KEY_ID\" INTEGER NOT NULL ," + // 2: keyId
                "\"SUCCESS_TIME\" INTEGER NOT NULL ," + // 3: successTime
                "\"WARNING_TIME\" INTEGER NOT NULL ," + // 4: warningTime
                "\"TRAIN_TIME\" INTEGER NOT NULL ," + // 5: trainTime
                "\"SCORE\" INTEGER NOT NULL ," + // 6: score
                "\"PAIN_LEVEL\" INTEGER NOT NULL ," + // 7: painLevel
                "\"ADVERSE_REACTIONS\" TEXT," + // 8: adverseReactions
                "\"TARGET_LOAD\" INTEGER NOT NULL ," + // 9: targetLoad
                "\"CREATE_DATE\" INTEGER NOT NULL ," + // 10: createDate
                "\"FREQUENCY\" INTEGER NOT NULL ," + // 11: frequency
                "\"DIAGNOSTIC\" TEXT," + // 12: diagnostic
                "\"STR\" TEXT," + // 13: str
                "\"PLAN_ID\" INTEGER NOT NULL ," + // 14: planId
                "\"CLASS_ID\" INTEGER NOT NULL ," + // 15: classId
                "\"IS_UPLOAD\" INTEGER NOT NULL ," + // 16: isUpload
                "\"DATE_STR\" TEXT);"); // 17: dateStr
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_USER_TRAIN_RECORD_KEY_ID ON \"USER_TRAIN_RECORD\"" +
                " (\"KEY_ID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_TRAIN_RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserTrainRecordEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
        stmt.bindLong(3, entity.getKeyId());
        stmt.bindLong(4, entity.getSuccessTime());
        stmt.bindLong(5, entity.getWarningTime());
        stmt.bindLong(6, entity.getTrainTime());
        stmt.bindLong(7, entity.getScore());
        stmt.bindLong(8, entity.getPainLevel());
 
        String adverseReactions = entity.getAdverseReactions();
        if (adverseReactions != null) {
            stmt.bindString(9, adverseReactions);
        }
        stmt.bindLong(10, entity.getTargetLoad());
        stmt.bindLong(11, entity.getCreateDate());
        stmt.bindLong(12, entity.getFrequency());
 
        String diagnostic = entity.getDiagnostic();
        if (diagnostic != null) {
            stmt.bindString(13, diagnostic);
        }
 
        String str = entity.getStr();
        if (str != null) {
            stmt.bindString(14, str);
        }
        stmt.bindLong(15, entity.getPlanId());
        stmt.bindLong(16, entity.getClassId());
        stmt.bindLong(17, entity.getIsUpload());
 
        String dateStr = entity.getDateStr();
        if (dateStr != null) {
            stmt.bindString(18, dateStr);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserTrainRecordEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
        stmt.bindLong(3, entity.getKeyId());
        stmt.bindLong(4, entity.getSuccessTime());
        stmt.bindLong(5, entity.getWarningTime());
        stmt.bindLong(6, entity.getTrainTime());
        stmt.bindLong(7, entity.getScore());
        stmt.bindLong(8, entity.getPainLevel());
 
        String adverseReactions = entity.getAdverseReactions();
        if (adverseReactions != null) {
            stmt.bindString(9, adverseReactions);
        }
        stmt.bindLong(10, entity.getTargetLoad());
        stmt.bindLong(11, entity.getCreateDate());
        stmt.bindLong(12, entity.getFrequency());
 
        String diagnostic = entity.getDiagnostic();
        if (diagnostic != null) {
            stmt.bindString(13, diagnostic);
        }
 
        String str = entity.getStr();
        if (str != null) {
            stmt.bindString(14, str);
        }
        stmt.bindLong(15, entity.getPlanId());
        stmt.bindLong(16, entity.getClassId());
        stmt.bindLong(17, entity.getIsUpload());
 
        String dateStr = entity.getDateStr();
        if (dateStr != null) {
            stmt.bindString(18, dateStr);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserTrainRecordEntity readEntity(Cursor cursor, int offset) {
        UserTrainRecordEntity entity = new UserTrainRecordEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // userId
            cursor.getLong(offset + 2), // keyId
            cursor.getInt(offset + 3), // successTime
            cursor.getInt(offset + 4), // warningTime
            cursor.getInt(offset + 5), // trainTime
            cursor.getInt(offset + 6), // score
            cursor.getInt(offset + 7), // painLevel
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // adverseReactions
            cursor.getInt(offset + 9), // targetLoad
            cursor.getLong(offset + 10), // createDate
            cursor.getInt(offset + 11), // frequency
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // diagnostic
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // str
            cursor.getLong(offset + 14), // planId
            cursor.getInt(offset + 15), // classId
            cursor.getInt(offset + 16), // isUpload
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // dateStr
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserTrainRecordEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.getLong(offset + 1));
        entity.setKeyId(cursor.getLong(offset + 2));
        entity.setSuccessTime(cursor.getInt(offset + 3));
        entity.setWarningTime(cursor.getInt(offset + 4));
        entity.setTrainTime(cursor.getInt(offset + 5));
        entity.setScore(cursor.getInt(offset + 6));
        entity.setPainLevel(cursor.getInt(offset + 7));
        entity.setAdverseReactions(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTargetLoad(cursor.getInt(offset + 9));
        entity.setCreateDate(cursor.getLong(offset + 10));
        entity.setFrequency(cursor.getInt(offset + 11));
        entity.setDiagnostic(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setStr(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setPlanId(cursor.getLong(offset + 14));
        entity.setClassId(cursor.getInt(offset + 15));
        entity.setIsUpload(cursor.getInt(offset + 16));
        entity.setDateStr(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserTrainRecordEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserTrainRecordEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserTrainRecordEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
