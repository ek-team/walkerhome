package com.pharos.walker.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.pharos.walker.beans.ActivationCodeBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ACTIVATION_CODE".
*/
public class ActivationCodeBeanDao extends AbstractDao<ActivationCodeBean, Long> {

    public static final String TABLENAME = "ACTIVATION_CODE";

    /**
     * Properties of entity ActivationCodeBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MacAddress = new Property(1, String.class, "macAddress", false, "MAC_ADDRESS");
        public final static Property CreateDate = new Property(2, long.class, "createDate", false, "CREATE_DATE");
        public final static Property RecordDate = new Property(3, long.class, "recordDate", false, "RECORD_DATE");
        public final static Property PublicKey = new Property(4, String.class, "publicKey", false, "PUBLIC_KEY");
        public final static Property ActivationCode = new Property(5, String.class, "activationCode", false, "ACTIVATION_CODE");
        public final static Property QrcodeLink = new Property(6, String.class, "qrcodeLink", false, "QRCODE_LINK");
    }


    public ActivationCodeBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ActivationCodeBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ACTIVATION_CODE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MAC_ADDRESS\" TEXT," + // 1: macAddress
                "\"CREATE_DATE\" INTEGER NOT NULL ," + // 2: createDate
                "\"RECORD_DATE\" INTEGER NOT NULL ," + // 3: recordDate
                "\"PUBLIC_KEY\" TEXT," + // 4: publicKey
                "\"ACTIVATION_CODE\" TEXT," + // 5: activationCode
                "\"QRCODE_LINK\" TEXT);"); // 6: qrcodeLink
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ACTIVATION_CODE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ActivationCodeBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String macAddress = entity.getMacAddress();
        if (macAddress != null) {
            stmt.bindString(2, macAddress);
        }
        stmt.bindLong(3, entity.getCreateDate());
        stmt.bindLong(4, entity.getRecordDate());
 
        String publicKey = entity.getPublicKey();
        if (publicKey != null) {
            stmt.bindString(5, publicKey);
        }
 
        String activationCode = entity.getActivationCode();
        if (activationCode != null) {
            stmt.bindString(6, activationCode);
        }
 
        String qrcodeLink = entity.getQrcodeLink();
        if (qrcodeLink != null) {
            stmt.bindString(7, qrcodeLink);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ActivationCodeBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String macAddress = entity.getMacAddress();
        if (macAddress != null) {
            stmt.bindString(2, macAddress);
        }
        stmt.bindLong(3, entity.getCreateDate());
        stmt.bindLong(4, entity.getRecordDate());
 
        String publicKey = entity.getPublicKey();
        if (publicKey != null) {
            stmt.bindString(5, publicKey);
        }
 
        String activationCode = entity.getActivationCode();
        if (activationCode != null) {
            stmt.bindString(6, activationCode);
        }
 
        String qrcodeLink = entity.getQrcodeLink();
        if (qrcodeLink != null) {
            stmt.bindString(7, qrcodeLink);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ActivationCodeBean readEntity(Cursor cursor, int offset) {
        ActivationCodeBean entity = new ActivationCodeBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // macAddress
            cursor.getLong(offset + 2), // createDate
            cursor.getLong(offset + 3), // recordDate
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // publicKey
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // activationCode
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // qrcodeLink
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ActivationCodeBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMacAddress(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCreateDate(cursor.getLong(offset + 2));
        entity.setRecordDate(cursor.getLong(offset + 3));
        entity.setPublicKey(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setActivationCode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setQrcodeLink(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ActivationCodeBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ActivationCodeBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ActivationCodeBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
