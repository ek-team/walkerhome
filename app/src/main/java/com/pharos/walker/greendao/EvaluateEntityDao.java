package com.pharos.walker.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.pharos.walker.beans.EvaluateEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EVALUATE_VALUE".
*/
public class EvaluateEntityDao extends AbstractDao<EvaluateEntity, Long> {

    public static final String TABLENAME = "EVALUATE_VALUE";

    /**
     * Properties of entity EvaluateEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property KeyId = new Property(1, long.class, "keyId", false, "KEY_ID");
        public final static Property UserId = new Property(2, long.class, "userId", false, "USER_ID");
        public final static Property EvaluateResult = new Property(3, int.class, "evaluateResult", false, "EVALUATE_RESULT");
        public final static Property CreateDate = new Property(4, long.class, "createDate", false, "CREATE_DATE");
        public final static Property UpdateDate = new Property(5, long.class, "updateDate", false, "UPDATE_DATE");
        public final static Property Vas = new Property(6, int.class, "vas", false, "VAS");
        public final static Property FirstValue = new Property(7, float.class, "firstValue", false, "FIRST_VALUE");
        public final static Property SecondValue = new Property(8, float.class, "secondValue", false, "SECOND_VALUE");
        public final static Property ThirdValue = new Property(9, float.class, "thirdValue", false, "THIRD_VALUE");
        public final static Property IsUpload = new Property(10, int.class, "isUpload", false, "IS_UPLOAD");
        public final static Property RecordPath = new Property(11, String.class, "recordPath", false, "RECORD_PATH");
    }


    public EvaluateEntityDao(DaoConfig config) {
        super(config);
    }
    
    public EvaluateEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EVALUATE_VALUE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"KEY_ID\" INTEGER NOT NULL ," + // 1: keyId
                "\"USER_ID\" INTEGER NOT NULL ," + // 2: userId
                "\"EVALUATE_RESULT\" INTEGER NOT NULL ," + // 3: evaluateResult
                "\"CREATE_DATE\" INTEGER NOT NULL ," + // 4: createDate
                "\"UPDATE_DATE\" INTEGER NOT NULL ," + // 5: updateDate
                "\"VAS\" INTEGER NOT NULL ," + // 6: vas
                "\"FIRST_VALUE\" REAL NOT NULL ," + // 7: firstValue
                "\"SECOND_VALUE\" REAL NOT NULL ," + // 8: secondValue
                "\"THIRD_VALUE\" REAL NOT NULL ," + // 9: thirdValue
                "\"IS_UPLOAD\" INTEGER NOT NULL ," + // 10: isUpload
                "\"RECORD_PATH\" TEXT);"); // 11: recordPath
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_EVALUATE_VALUE_KEY_ID ON \"EVALUATE_VALUE\"" +
                " (\"KEY_ID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EVALUATE_VALUE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EvaluateEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getKeyId());
        stmt.bindLong(3, entity.getUserId());
        stmt.bindLong(4, entity.getEvaluateResult());
        stmt.bindLong(5, entity.getCreateDate());
        stmt.bindLong(6, entity.getUpdateDate());
        stmt.bindLong(7, entity.getVas());
        stmt.bindDouble(8, entity.getFirstValue());
        stmt.bindDouble(9, entity.getSecondValue());
        stmt.bindDouble(10, entity.getThirdValue());
        stmt.bindLong(11, entity.getIsUpload());
 
        String recordPath = entity.getRecordPath();
        if (recordPath != null) {
            stmt.bindString(12, recordPath);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EvaluateEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getKeyId());
        stmt.bindLong(3, entity.getUserId());
        stmt.bindLong(4, entity.getEvaluateResult());
        stmt.bindLong(5, entity.getCreateDate());
        stmt.bindLong(6, entity.getUpdateDate());
        stmt.bindLong(7, entity.getVas());
        stmt.bindDouble(8, entity.getFirstValue());
        stmt.bindDouble(9, entity.getSecondValue());
        stmt.bindDouble(10, entity.getThirdValue());
        stmt.bindLong(11, entity.getIsUpload());
 
        String recordPath = entity.getRecordPath();
        if (recordPath != null) {
            stmt.bindString(12, recordPath);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public EvaluateEntity readEntity(Cursor cursor, int offset) {
        EvaluateEntity entity = new EvaluateEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // keyId
            cursor.getLong(offset + 2), // userId
            cursor.getInt(offset + 3), // evaluateResult
            cursor.getLong(offset + 4), // createDate
            cursor.getLong(offset + 5), // updateDate
            cursor.getInt(offset + 6), // vas
            cursor.getFloat(offset + 7), // firstValue
            cursor.getFloat(offset + 8), // secondValue
            cursor.getFloat(offset + 9), // thirdValue
            cursor.getInt(offset + 10), // isUpload
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // recordPath
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EvaluateEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setKeyId(cursor.getLong(offset + 1));
        entity.setUserId(cursor.getLong(offset + 2));
        entity.setEvaluateResult(cursor.getInt(offset + 3));
        entity.setCreateDate(cursor.getLong(offset + 4));
        entity.setUpdateDate(cursor.getLong(offset + 5));
        entity.setVas(cursor.getInt(offset + 6));
        entity.setFirstValue(cursor.getFloat(offset + 7));
        entity.setSecondValue(cursor.getFloat(offset + 8));
        entity.setThirdValue(cursor.getFloat(offset + 9));
        entity.setIsUpload(cursor.getInt(offset + 10));
        entity.setRecordPath(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(EvaluateEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(EvaluateEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(EvaluateEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
