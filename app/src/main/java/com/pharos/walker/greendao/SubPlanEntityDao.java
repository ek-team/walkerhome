package com.pharos.walker.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.pharos.walker.beans.SubPlanEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SUB_TRAIN_PLAN".
*/
public class SubPlanEntityDao extends AbstractDao<SubPlanEntity, Long> {

    public static final String TABLENAME = "SUB_TRAIN_PLAN";

    /**
     * Properties of entity SubPlanEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, long.class, "userId", false, "USER_ID");
        public final static Property KeyId = new Property(2, long.class, "keyId", false, "KEY_ID");
        public final static Property PlanId = new Property(3, long.class, "planId", false, "PLAN_ID");
        public final static Property PlanStatus = new Property(4, int.class, "planStatus", false, "PLAN_STATUS");
        public final static Property ClassId = new Property(5, int.class, "classId", false, "CLASS_ID");
        public final static Property Load = new Property(6, int.class, "load", false, "LOAD");
        public final static Property WeekNum = new Property(7, int.class, "weekNum", false, "WEEK_NUM");
        public final static Property DayNum = new Property(8, int.class, "dayNum", false, "DAY_NUM");
        public final static Property TrainTime = new Property(9, int.class, "trainTime", false, "TRAIN_TIME");
        public final static Property TrainStep = new Property(10, int.class, "trainStep", false, "TRAIN_STEP");
        public final static Property ModifyStatus = new Property(11, int.class, "modifyStatus", false, "MODIFY_STATUS");
        public final static Property StartDate = new Property(12, String.class, "startDate", false, "START_DATE");
        public final static Property EndDate = new Property(13, String.class, "endDate", false, "END_DATE");
    }


    public SubPlanEntityDao(DaoConfig config) {
        super(config);
    }
    
    public SubPlanEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SUB_TRAIN_PLAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_ID\" INTEGER NOT NULL ," + // 1: userId
                "\"KEY_ID\" INTEGER NOT NULL ," + // 2: keyId
                "\"PLAN_ID\" INTEGER NOT NULL ," + // 3: planId
                "\"PLAN_STATUS\" INTEGER NOT NULL ," + // 4: planStatus
                "\"CLASS_ID\" INTEGER NOT NULL ," + // 5: classId
                "\"LOAD\" INTEGER NOT NULL ," + // 6: load
                "\"WEEK_NUM\" INTEGER NOT NULL ," + // 7: weekNum
                "\"DAY_NUM\" INTEGER NOT NULL ," + // 8: dayNum
                "\"TRAIN_TIME\" INTEGER NOT NULL ," + // 9: trainTime
                "\"TRAIN_STEP\" INTEGER NOT NULL ," + // 10: trainStep
                "\"MODIFY_STATUS\" INTEGER NOT NULL ," + // 11: modifyStatus
                "\"START_DATE\" TEXT," + // 12: startDate
                "\"END_DATE\" TEXT);"); // 13: endDate
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_SUB_TRAIN_PLAN_KEY_ID ON \"SUB_TRAIN_PLAN\"" +
                " (\"KEY_ID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SUB_TRAIN_PLAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SubPlanEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
        stmt.bindLong(3, entity.getKeyId());
        stmt.bindLong(4, entity.getPlanId());
        stmt.bindLong(5, entity.getPlanStatus());
        stmt.bindLong(6, entity.getClassId());
        stmt.bindLong(7, entity.getLoad());
        stmt.bindLong(8, entity.getWeekNum());
        stmt.bindLong(9, entity.getDayNum());
        stmt.bindLong(10, entity.getTrainTime());
        stmt.bindLong(11, entity.getTrainStep());
        stmt.bindLong(12, entity.getModifyStatus());
 
        String startDate = entity.getStartDate();
        if (startDate != null) {
            stmt.bindString(13, startDate);
        }
 
        String endDate = entity.getEndDate();
        if (endDate != null) {
            stmt.bindString(14, endDate);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SubPlanEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
        stmt.bindLong(3, entity.getKeyId());
        stmt.bindLong(4, entity.getPlanId());
        stmt.bindLong(5, entity.getPlanStatus());
        stmt.bindLong(6, entity.getClassId());
        stmt.bindLong(7, entity.getLoad());
        stmt.bindLong(8, entity.getWeekNum());
        stmt.bindLong(9, entity.getDayNum());
        stmt.bindLong(10, entity.getTrainTime());
        stmt.bindLong(11, entity.getTrainStep());
        stmt.bindLong(12, entity.getModifyStatus());
 
        String startDate = entity.getStartDate();
        if (startDate != null) {
            stmt.bindString(13, startDate);
        }
 
        String endDate = entity.getEndDate();
        if (endDate != null) {
            stmt.bindString(14, endDate);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SubPlanEntity readEntity(Cursor cursor, int offset) {
        SubPlanEntity entity = new SubPlanEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // userId
            cursor.getLong(offset + 2), // keyId
            cursor.getLong(offset + 3), // planId
            cursor.getInt(offset + 4), // planStatus
            cursor.getInt(offset + 5), // classId
            cursor.getInt(offset + 6), // load
            cursor.getInt(offset + 7), // weekNum
            cursor.getInt(offset + 8), // dayNum
            cursor.getInt(offset + 9), // trainTime
            cursor.getInt(offset + 10), // trainStep
            cursor.getInt(offset + 11), // modifyStatus
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // startDate
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // endDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SubPlanEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.getLong(offset + 1));
        entity.setKeyId(cursor.getLong(offset + 2));
        entity.setPlanId(cursor.getLong(offset + 3));
        entity.setPlanStatus(cursor.getInt(offset + 4));
        entity.setClassId(cursor.getInt(offset + 5));
        entity.setLoad(cursor.getInt(offset + 6));
        entity.setWeekNum(cursor.getInt(offset + 7));
        entity.setDayNum(cursor.getInt(offset + 8));
        entity.setTrainTime(cursor.getInt(offset + 9));
        entity.setTrainStep(cursor.getInt(offset + 10));
        entity.setModifyStatus(cursor.getInt(offset + 11));
        entity.setStartDate(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setEndDate(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SubPlanEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SubPlanEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SubPlanEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
