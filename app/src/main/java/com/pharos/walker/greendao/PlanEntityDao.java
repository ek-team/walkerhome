package com.pharos.walker.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.pharos.walker.beans.PlanEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRAIN_PLAN".
*/
public class PlanEntityDao extends AbstractDao<PlanEntity, Long> {

    public static final String TABLENAME = "TRAIN_PLAN";

    /**
     * Properties of entity PlanEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, long.class, "userId", false, "USER_ID");
        public final static Property KeyId = new Property(2, long.class, "keyId", false, "KEY_ID");
        public final static Property PlanId = new Property(3, long.class, "planId", false, "PLAN_ID");
        public final static Property PlanType = new Property(4, int.class, "planType", false, "PLAN_TYPE");
        public final static Property CreateDate = new Property(5, String.class, "createDate", false, "CREATE_DATE");
        public final static Property UpdateDate = new Property(6, String.class, "updateDate", false, "UPDATE_DATE");
        public final static Property Weight = new Property(7, String.class, "weight", false, "WEIGHT");
        public final static Property PlanTotalDay = new Property(8, int.class, "planTotalDay", false, "PLAN_TOTAL_DAY");
        public final static Property ClassId = new Property(9, int.class, "classId", false, "CLASS_ID");
        public final static Property PlanStatus = new Property(10, int.class, "planStatus", false, "PLAN_STATUS");
        public final static Property StartDate = new Property(11, String.class, "startDate", false, "START_DATE");
        public final static Property EndDate = new Property(12, String.class, "endDate", false, "END_DATE");
        public final static Property TimeOfDay = new Property(13, int.class, "timeOfDay", false, "TIME_OF_DAY");
        public final static Property CountOfTime = new Property(14, int.class, "countOfTime", false, "COUNT_OF_TIME");
        public final static Property Load = new Property(15, int.class, "load", false, "LOAD");
        public final static Property TrainTime = new Property(16, int.class, "trainTime", false, "TRAIN_TIME");
        public final static Property TrainType = new Property(17, int.class, "trainType", false, "TRAIN_TYPE");
        public final static Property Str = new Property(18, String.class, "str", false, "STR");
        public final static Property Remark = new Property(19, String.class, "remark", false, "REMARK");
    }


    public PlanEntityDao(DaoConfig config) {
        super(config);
    }
    
    public PlanEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRAIN_PLAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_ID\" INTEGER NOT NULL ," + // 1: userId
                "\"KEY_ID\" INTEGER NOT NULL ," + // 2: keyId
                "\"PLAN_ID\" INTEGER NOT NULL ," + // 3: planId
                "\"PLAN_TYPE\" INTEGER NOT NULL ," + // 4: planType
                "\"CREATE_DATE\" TEXT," + // 5: createDate
                "\"UPDATE_DATE\" TEXT," + // 6: updateDate
                "\"WEIGHT\" TEXT," + // 7: weight
                "\"PLAN_TOTAL_DAY\" INTEGER NOT NULL ," + // 8: planTotalDay
                "\"CLASS_ID\" INTEGER NOT NULL ," + // 9: classId
                "\"PLAN_STATUS\" INTEGER NOT NULL ," + // 10: planStatus
                "\"START_DATE\" TEXT," + // 11: startDate
                "\"END_DATE\" TEXT," + // 12: endDate
                "\"TIME_OF_DAY\" INTEGER NOT NULL ," + // 13: timeOfDay
                "\"COUNT_OF_TIME\" INTEGER NOT NULL ," + // 14: countOfTime
                "\"LOAD\" INTEGER NOT NULL ," + // 15: load
                "\"TRAIN_TIME\" INTEGER NOT NULL ," + // 16: trainTime
                "\"TRAIN_TYPE\" INTEGER NOT NULL ," + // 17: trainType
                "\"STR\" TEXT," + // 18: str
                "\"REMARK\" TEXT);"); // 19: remark
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_TRAIN_PLAN_KEY_ID ON \"TRAIN_PLAN\"" +
                " (\"KEY_ID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRAIN_PLAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PlanEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
        stmt.bindLong(3, entity.getKeyId());
        stmt.bindLong(4, entity.getPlanId());
        stmt.bindLong(5, entity.getPlanType());
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(6, createDate);
        }
 
        String updateDate = entity.getUpdateDate();
        if (updateDate != null) {
            stmt.bindString(7, updateDate);
        }
 
        String weight = entity.getWeight();
        if (weight != null) {
            stmt.bindString(8, weight);
        }
        stmt.bindLong(9, entity.getPlanTotalDay());
        stmt.bindLong(10, entity.getClassId());
        stmt.bindLong(11, entity.getPlanStatus());
 
        String startDate = entity.getStartDate();
        if (startDate != null) {
            stmt.bindString(12, startDate);
        }
 
        String endDate = entity.getEndDate();
        if (endDate != null) {
            stmt.bindString(13, endDate);
        }
        stmt.bindLong(14, entity.getTimeOfDay());
        stmt.bindLong(15, entity.getCountOfTime());
        stmt.bindLong(16, entity.getLoad());
        stmt.bindLong(17, entity.getTrainTime());
        stmt.bindLong(18, entity.getTrainType());
 
        String str = entity.getStr();
        if (str != null) {
            stmt.bindString(19, str);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(20, remark);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PlanEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
        stmt.bindLong(3, entity.getKeyId());
        stmt.bindLong(4, entity.getPlanId());
        stmt.bindLong(5, entity.getPlanType());
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(6, createDate);
        }
 
        String updateDate = entity.getUpdateDate();
        if (updateDate != null) {
            stmt.bindString(7, updateDate);
        }
 
        String weight = entity.getWeight();
        if (weight != null) {
            stmt.bindString(8, weight);
        }
        stmt.bindLong(9, entity.getPlanTotalDay());
        stmt.bindLong(10, entity.getClassId());
        stmt.bindLong(11, entity.getPlanStatus());
 
        String startDate = entity.getStartDate();
        if (startDate != null) {
            stmt.bindString(12, startDate);
        }
 
        String endDate = entity.getEndDate();
        if (endDate != null) {
            stmt.bindString(13, endDate);
        }
        stmt.bindLong(14, entity.getTimeOfDay());
        stmt.bindLong(15, entity.getCountOfTime());
        stmt.bindLong(16, entity.getLoad());
        stmt.bindLong(17, entity.getTrainTime());
        stmt.bindLong(18, entity.getTrainType());
 
        String str = entity.getStr();
        if (str != null) {
            stmt.bindString(19, str);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(20, remark);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PlanEntity readEntity(Cursor cursor, int offset) {
        PlanEntity entity = new PlanEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // userId
            cursor.getLong(offset + 2), // keyId
            cursor.getLong(offset + 3), // planId
            cursor.getInt(offset + 4), // planType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // createDate
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // updateDate
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // weight
            cursor.getInt(offset + 8), // planTotalDay
            cursor.getInt(offset + 9), // classId
            cursor.getInt(offset + 10), // planStatus
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // startDate
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // endDate
            cursor.getInt(offset + 13), // timeOfDay
            cursor.getInt(offset + 14), // countOfTime
            cursor.getInt(offset + 15), // load
            cursor.getInt(offset + 16), // trainTime
            cursor.getInt(offset + 17), // trainType
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // str
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19) // remark
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PlanEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.getLong(offset + 1));
        entity.setKeyId(cursor.getLong(offset + 2));
        entity.setPlanId(cursor.getLong(offset + 3));
        entity.setPlanType(cursor.getInt(offset + 4));
        entity.setCreateDate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUpdateDate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setWeight(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPlanTotalDay(cursor.getInt(offset + 8));
        entity.setClassId(cursor.getInt(offset + 9));
        entity.setPlanStatus(cursor.getInt(offset + 10));
        entity.setStartDate(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setEndDate(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setTimeOfDay(cursor.getInt(offset + 13));
        entity.setCountOfTime(cursor.getInt(offset + 14));
        entity.setLoad(cursor.getInt(offset + 15));
        entity.setTrainTime(cursor.getInt(offset + 16));
        entity.setTrainType(cursor.getInt(offset + 17));
        entity.setStr(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setRemark(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PlanEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PlanEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PlanEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
