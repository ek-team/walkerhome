package com.pharos.walker.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.pharos.walker.beans.GloveBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GLOVE".
*/
public class GloveBeanDao extends AbstractDao<GloveBean, Long> {

    public static final String TABLENAME = "GLOVE";

    /**
     * Properties of entity GloveBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, Long.class, "userId", false, "USER_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Type = new Property(3, int.class, "type", false, "TYPE");
        public final static Property Size = new Property(4, int.class, "size", false, "SIZE");
        public final static Property Lows = new Property(5, String.class, "lows", false, "LOWS");
        public final static Property Ups = new Property(6, String.class, "ups", false, "UPS");
        public final static Property InitializePosition = new Property(7, String.class, "initializePosition", false, "INITIALIZE_POSITION");
        public final static Property CustomAngle = new Property(8, String.class, "customAngle", false, "CUSTOM_ANGLE");
        public final static Property MotorCurrent = new Property(9, String.class, "motorCurrent", false, "MOTOR_CURRENT");
        public final static Property CreateDate = new Property(10, String.class, "createDate", false, "CREATE_DATE");
        public final static Property UpdateDate = new Property(11, String.class, "updateDate", false, "UPDATE_DATE");
    }


    public GloveBeanDao(DaoConfig config) {
        super(config);
    }
    
    public GloveBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GLOVE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" INTEGER," + // 1: userId
                "\"NAME\" TEXT," + // 2: name
                "\"TYPE\" INTEGER NOT NULL ," + // 3: type
                "\"SIZE\" INTEGER NOT NULL ," + // 4: size
                "\"LOWS\" TEXT," + // 5: lows
                "\"UPS\" TEXT," + // 6: ups
                "\"INITIALIZE_POSITION\" TEXT," + // 7: initializePosition
                "\"CUSTOM_ANGLE\" TEXT," + // 8: customAngle
                "\"MOTOR_CURRENT\" TEXT," + // 9: motorCurrent
                "\"CREATE_DATE\" TEXT," + // 10: createDate
                "\"UPDATE_DATE\" TEXT);"); // 11: updateDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GLOVE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GloveBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getType());
        stmt.bindLong(5, entity.getSize());
 
        String lows = entity.getLows();
        if (lows != null) {
            stmt.bindString(6, lows);
        }
 
        String ups = entity.getUps();
        if (ups != null) {
            stmt.bindString(7, ups);
        }
 
        String initializePosition = entity.getInitializePosition();
        if (initializePosition != null) {
            stmt.bindString(8, initializePosition);
        }
 
        String customAngle = entity.getCustomAngle();
        if (customAngle != null) {
            stmt.bindString(9, customAngle);
        }
 
        String motorCurrent = entity.getMotorCurrent();
        if (motorCurrent != null) {
            stmt.bindString(10, motorCurrent);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(11, createDate);
        }
 
        String updateDate = entity.getUpdateDate();
        if (updateDate != null) {
            stmt.bindString(12, updateDate);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GloveBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getType());
        stmt.bindLong(5, entity.getSize());
 
        String lows = entity.getLows();
        if (lows != null) {
            stmt.bindString(6, lows);
        }
 
        String ups = entity.getUps();
        if (ups != null) {
            stmt.bindString(7, ups);
        }
 
        String initializePosition = entity.getInitializePosition();
        if (initializePosition != null) {
            stmt.bindString(8, initializePosition);
        }
 
        String customAngle = entity.getCustomAngle();
        if (customAngle != null) {
            stmt.bindString(9, customAngle);
        }
 
        String motorCurrent = entity.getMotorCurrent();
        if (motorCurrent != null) {
            stmt.bindString(10, motorCurrent);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(11, createDate);
        }
 
        String updateDate = entity.getUpdateDate();
        if (updateDate != null) {
            stmt.bindString(12, updateDate);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GloveBean readEntity(Cursor cursor, int offset) {
        GloveBean entity = new GloveBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.getInt(offset + 3), // type
            cursor.getInt(offset + 4), // size
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // lows
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // ups
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // initializePosition
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // customAngle
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // motorCurrent
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // createDate
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // updateDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GloveBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType(cursor.getInt(offset + 3));
        entity.setSize(cursor.getInt(offset + 4));
        entity.setLows(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUps(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setInitializePosition(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCustomAngle(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMotorCurrent(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCreateDate(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUpdateDate(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GloveBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GloveBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GloveBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
