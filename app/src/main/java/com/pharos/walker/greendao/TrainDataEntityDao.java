package com.pharos.walker.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.pharos.walker.beans.TrainDataEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRAIN_DATA".
*/
public class TrainDataEntityDao extends AbstractDao<TrainDataEntity, Long> {

    public static final String TABLENAME = "TRAIN_DATA";

    /**
     * Properties of entity TrainDataEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, long.class, "userId", false, "USER_ID");
        public final static Property KeyId = new Property(2, long.class, "keyId", false, "KEY_ID");
        public final static Property CreateDate = new Property(3, long.class, "createDate", false, "CREATE_DATE");
        public final static Property Frequency = new Property(4, int.class, "frequency", false, "FREQUENCY");
        public final static Property TargetLoad = new Property(5, int.class, "targetLoad", false, "TARGET_LOAD");
        public final static Property RealLoad = new Property(6, int.class, "realLoad", false, "REAL_LOAD");
        public final static Property PlanId = new Property(7, long.class, "planId", false, "PLAN_ID");
        public final static Property ClassId = new Property(8, int.class, "classId", false, "CLASS_ID");
        public final static Property IsUpload = new Property(9, int.class, "isUpload", false, "IS_UPLOAD");
        public final static Property DateStr = new Property(10, String.class, "dateStr", false, "DATE_STR");
    }


    public TrainDataEntityDao(DaoConfig config) {
        super(config);
    }
    
    public TrainDataEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRAIN_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_ID\" INTEGER NOT NULL ," + // 1: userId
                "\"KEY_ID\" INTEGER NOT NULL ," + // 2: keyId
                "\"CREATE_DATE\" INTEGER NOT NULL ," + // 3: createDate
                "\"FREQUENCY\" INTEGER NOT NULL ," + // 4: frequency
                "\"TARGET_LOAD\" INTEGER NOT NULL ," + // 5: targetLoad
                "\"REAL_LOAD\" INTEGER NOT NULL ," + // 6: realLoad
                "\"PLAN_ID\" INTEGER NOT NULL ," + // 7: planId
                "\"CLASS_ID\" INTEGER NOT NULL ," + // 8: classId
                "\"IS_UPLOAD\" INTEGER NOT NULL ," + // 9: isUpload
                "\"DATE_STR\" TEXT);"); // 10: dateStr
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_TRAIN_DATA_KEY_ID ON \"TRAIN_DATA\"" +
                " (\"KEY_ID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRAIN_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TrainDataEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
        stmt.bindLong(3, entity.getKeyId());
        stmt.bindLong(4, entity.getCreateDate());
        stmt.bindLong(5, entity.getFrequency());
        stmt.bindLong(6, entity.getTargetLoad());
        stmt.bindLong(7, entity.getRealLoad());
        stmt.bindLong(8, entity.getPlanId());
        stmt.bindLong(9, entity.getClassId());
        stmt.bindLong(10, entity.getIsUpload());
 
        String dateStr = entity.getDateStr();
        if (dateStr != null) {
            stmt.bindString(11, dateStr);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TrainDataEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
        stmt.bindLong(3, entity.getKeyId());
        stmt.bindLong(4, entity.getCreateDate());
        stmt.bindLong(5, entity.getFrequency());
        stmt.bindLong(6, entity.getTargetLoad());
        stmt.bindLong(7, entity.getRealLoad());
        stmt.bindLong(8, entity.getPlanId());
        stmt.bindLong(9, entity.getClassId());
        stmt.bindLong(10, entity.getIsUpload());
 
        String dateStr = entity.getDateStr();
        if (dateStr != null) {
            stmt.bindString(11, dateStr);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TrainDataEntity readEntity(Cursor cursor, int offset) {
        TrainDataEntity entity = new TrainDataEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // userId
            cursor.getLong(offset + 2), // keyId
            cursor.getLong(offset + 3), // createDate
            cursor.getInt(offset + 4), // frequency
            cursor.getInt(offset + 5), // targetLoad
            cursor.getInt(offset + 6), // realLoad
            cursor.getLong(offset + 7), // planId
            cursor.getInt(offset + 8), // classId
            cursor.getInt(offset + 9), // isUpload
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // dateStr
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TrainDataEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.getLong(offset + 1));
        entity.setKeyId(cursor.getLong(offset + 2));
        entity.setCreateDate(cursor.getLong(offset + 3));
        entity.setFrequency(cursor.getInt(offset + 4));
        entity.setTargetLoad(cursor.getInt(offset + 5));
        entity.setRealLoad(cursor.getInt(offset + 6));
        entity.setPlanId(cursor.getLong(offset + 7));
        entity.setClassId(cursor.getInt(offset + 8));
        entity.setIsUpload(cursor.getInt(offset + 9));
        entity.setDateStr(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TrainDataEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TrainDataEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TrainDataEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
