package com.pharos.walker.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.pharos.walker.beans.OtherFeedbackBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "OTHER_FEEDBACK".
*/
public class OtherFeedbackBeanDao extends AbstractDao<OtherFeedbackBean, Long> {

    public static final String TABLENAME = "OTHER_FEEDBACK";

    /**
     * Properties of entity OtherFeedbackBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property KeyId = new Property(1, long.class, "keyId", false, "KEY_ID");
        public final static Property MacAddress = new Property(2, String.class, "macAddress", false, "MAC_ADDRESS");
        public final static Property Value = new Property(3, String.class, "value", false, "VALUE");
        public final static Property Str = new Property(4, String.class, "str", false, "STR");
        public final static Property CreateDate = new Property(5, long.class, "createDate", false, "CREATE_DATE");
    }


    public OtherFeedbackBeanDao(DaoConfig config) {
        super(config);
    }
    
    public OtherFeedbackBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"OTHER_FEEDBACK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"KEY_ID\" INTEGER NOT NULL ," + // 1: keyId
                "\"MAC_ADDRESS\" TEXT," + // 2: macAddress
                "\"VALUE\" TEXT," + // 3: value
                "\"STR\" TEXT," + // 4: str
                "\"CREATE_DATE\" INTEGER NOT NULL );"); // 5: createDate
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_OTHER_FEEDBACK_VALUE ON \"OTHER_FEEDBACK\"" +
                " (\"VALUE\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"OTHER_FEEDBACK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, OtherFeedbackBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getKeyId());
 
        String macAddress = entity.getMacAddress();
        if (macAddress != null) {
            stmt.bindString(3, macAddress);
        }
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(4, value);
        }
 
        String str = entity.getStr();
        if (str != null) {
            stmt.bindString(5, str);
        }
        stmt.bindLong(6, entity.getCreateDate());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, OtherFeedbackBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getKeyId());
 
        String macAddress = entity.getMacAddress();
        if (macAddress != null) {
            stmt.bindString(3, macAddress);
        }
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(4, value);
        }
 
        String str = entity.getStr();
        if (str != null) {
            stmt.bindString(5, str);
        }
        stmt.bindLong(6, entity.getCreateDate());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public OtherFeedbackBean readEntity(Cursor cursor, int offset) {
        OtherFeedbackBean entity = new OtherFeedbackBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // keyId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // macAddress
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // value
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // str
            cursor.getLong(offset + 5) // createDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, OtherFeedbackBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setKeyId(cursor.getLong(offset + 1));
        entity.setMacAddress(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setValue(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStr(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCreateDate(cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(OtherFeedbackBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(OtherFeedbackBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(OtherFeedbackBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
